@using SFA.DAS.TeachInFurtherEducation.Web.Helpers
@model NewsLetterViewModel
@{
    var backColor = StringHelper.GetCssClassName();

    <style nonce="@Context.GetNonce()">
        .@backColor {
            background-color: @Model.BackgroundColor;
        }
    </style>

    <div id="signUpForm" class="govuk-grid-row @backColor govuk-!-padding-3">
        <div class="govuk-width-container">

           <div id="newsletter" class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                    <h2 class="govuk-heading-l">@Model.NewsLetterHeading</h2>
                     @Html.Raw(Model.NewsLetterDescription)
                </div>
            </div>

            <div class="govuk-grid-row">
                <div class="govuk-grid-column-two-thirds">
                

                    <!-- Success Message -->
                    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
                    {
                        <div class="govuk-panel govuk-panel--confirmation">
                            <h4 class="govuk-panel__title">Subscription Successful</h4>
                            <div class="govuk-panel__body">@Model.SuccessMessage</div>
                        </div>

                        <script nonce="@Context.GetNonce()">
                            window.dataLayer = window.dataLayer || [];
                            window.dataLayer.push({
                                'event': 'email_signup',
                                'email': '@Model.EmailAddress'
                            });
                        </script>
                    }

                    <!-- Error Summary -->
                    @if (!ViewData.ModelState.IsValid)
                    {
                        var modelStateErrors = ViewData.ModelState.Where(ms => ms.Value?.Errors.Count > 0 &&
                        (
                            ms.Key == nameof(Model.FirstName) ||
                            ms.Key == nameof(Model.LastName) ||
                            ms.Key == nameof(Model.EmailAddress) ||
                            ms.Key == nameof(Model.SelectedLocation) ||
                            ms.Key == nameof(Model.SelectedSubject)
                        ));

                        if (modelStateErrors.Any())
                        {
                            <div id="error-summary" class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" aria-live="assertive" data-module="govuk-error-summary" autofocus>
                                <h2 class="govuk-error-summary__title" id="error-summary-title">There was a problem</h2>
                                <div class="govuk-error-summary__body">
                                    <ul class="govuk-list govuk-error-summary__list">
                                        @foreach (var modelState in modelStateErrors)
                                        {
                                            var fieldId = modelState.Key;
                                            var errorMessage = modelState.Value?.Errors[0].ErrorMessage;
                                            <li><a href="#@fieldId">@errorMessage</a></li>
                                        }
                                    </ul>
                                </div>
                            </div>

                             <script nonce="@Context.GetNonce()">
                                document.addEventListener("DOMContentLoaded", function() {
                                    document.getElementById("error-summary").focus();  // This will set the focus on the postcode field
                                    window.setTimeout(function () {
                                        document.getElementById("error-summary").focus();
                                    }, 0);
                                });
                            </script>
                        }
                    }

                    <!-- Begin Form -->
                    @if (string.IsNullOrEmpty(Model.SuccessMessage)) // Only show the form if there's no success message
                    {
                        <form method="post" action="#newsletter" novalidate>
                            @Html.AntiForgeryToken()

                            <input type="hidden" name="formIdentifier" value="newsletter"/>

                            <!-- First Name Field -->
                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey("FirstName") && ViewData.ModelState["FirstName"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="FirstName">First Name</label>
                                @if (ViewData.ModelState.ContainsKey("FirstName") && ViewData.ModelState["FirstName"]?.Errors.Count > 0)
                                {
                                    <span id="FirstName-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState["FirstName"]?.Errors[0].ErrorMessage
                                    </span>
                                }
                                <input class="govuk-input govuk-!-width-full @(ViewData.ModelState.ContainsKey("FirstName") && ViewData.ModelState["FirstName"]?.Errors.Count > 0 ? "govuk-input--error" : "")"
                                        id="FirstName" name="FirstName" type="text" value="@Model.FirstName" maxlength="50"
                                        aria-describedby="@(ViewData.ModelState.ContainsKey("FirstName") && ViewData.ModelState["FirstName"]?.Errors.Count > 0 ? "FirstName-error" : null)" required aria-required="true">
                            </div>

                            <!-- Last Name Field -->
                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey("LastName") && ViewData.ModelState["LastName"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="LastName">Last Name</label>
                                @if (ViewData.ModelState.ContainsKey("LastName") && ViewData.ModelState["LastName"]?.Errors.Count > 0)
                                {
                                    <span id="LastName-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState["LastName"]?.Errors[0].ErrorMessage
                                    </span>
                                }
                                <input class="govuk-input govuk-!-width-full @(ViewData.ModelState.ContainsKey("LastName") && ViewData.ModelState["LastName"]?.Errors.Count > 0 ? "govuk-input--error" : "")"
                                        id="LastName" name="LastName" type="text" value="@Model.LastName" maxlength="50"
                                        aria-describedby="@(ViewData.ModelState.ContainsKey("LastName") && ViewData.ModelState["LastName"]?.Errors.Count > 0 ? "LastName-error" : null)" required aria-required="true">
                            </div>

                            <!-- Email Address Field -->
                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey("EmailAddress") && ViewData.ModelState["EmailAddress"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="EmailAddress">@Model.EmailIdLabel</label>
                                @if (ViewData.ModelState.ContainsKey("EmailAddress") && ViewData.ModelState["EmailAddress"]?.Errors.Count > 0)
                                {
                                    <span id="EmailAddress-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState["EmailAddress"]?.Errors[0].ErrorMessage
                                    </span>
                                }
                                <input class="govuk-input govuk-!-width-full @(ViewData.ModelState.ContainsKey("EmailAddress") && ViewData.ModelState["EmailAddress"]?.Errors.Count > 0 ? "govuk-input--error" : "")"
                                        id="EmailAddress" name="EmailAddress" type="text" value="@Model.EmailAddress"
                                        aria-describedby="@(ViewData.ModelState.ContainsKey("EmailAddress") && ViewData.ModelState["EmailAddress"]?.Errors.Count > 0 ? "EmailAddress-error" : null)" required aria-required="true">
                            </div>

                            <!-- Subject Select Dropdown -->
                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey("SelectedSubject") && ViewData.ModelState["SelectedSubject"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="SelectedSubject">@Model.SubjectFieldLabel</label>
                                @if (ViewData.ModelState.ContainsKey("SelectedSubject") && ViewData.ModelState["SelectedSubject"]?.Errors.Count > 0)
                                {
                                    <span id="SelectedSubject-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState["SelectedSubject"]?.Errors[0].ErrorMessage
                                    </span>
                                }
                                @Html.DropDownList(
                                    "SelectedSubject",
                                    Model.SubjectSelectOptions.Select(item => new SelectListItem
                                    {
                                        Text = item?.OptionText,
                                        Value = item?.OptionValue.ToString()
                                    }).ToList(),
                                    new Dictionary<string, object?>
                                    {
                                        { "class", "govuk-select govuk-!-width-full " + (ViewData.ModelState.ContainsKey("SelectedSubject") && ViewData.ModelState["SelectedSubject"]?.Errors.Count > 0 ? "govuk-select--error" : "") },
                                        { "id", "SelectedSubject" },
                                        { "aria-describedby", ViewData.ModelState.ContainsKey("SelectedSubject") && ViewData.ModelState["SelectedSubject"]?.Errors.Count > 0 ? "SelectedSubject-error" : null },
                                        { "required", "required" },
                                        { "aria-required", "true" }
                                    }
                                )
                            </div>

                            <!-- Location Select Dropdown -->
                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey("SelectedLocation") && ViewData.ModelState["SelectedLocation"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="SelectedLocation">@Model.LocationFieldLabel</label>
                                @if (ViewData.ModelState.ContainsKey("SelectedLocation") && ViewData.ModelState["SelectedLocation"]?.Errors.Count > 0)
                                {
                                    <span id="SelectedLocation-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @ViewData.ModelState["SelectedLocation"]?.Errors[0].ErrorMessage
                                    </span>
                                }
                                @Html.DropDownList(
                                    "SelectedLocation",
                                    Model.LocationSelectOptions.Select(item => new SelectListItem
                                    {
                                        Text = item?.OptionText,
                                        Value = item?.OptionValue.ToString()
                                    }).ToList(),
                                    new Dictionary<string, object?>
                                    {
                                        { "class", "govuk-select govuk-!-width-full " + (ViewData.ModelState.ContainsKey("SelectedLocation") && ViewData.ModelState["SelectedLocation"]?.Errors.Count > 0 ? "govuk-select--error" : "") },
                                        { "id", "SelectedLocation" },
                                        { "aria-describedby", ViewData.ModelState.ContainsKey("SelectedLocation") && ViewData.ModelState["SelectedLocation"]?.Errors.Count > 0 ? "SelectedLocation-error" : null },
                                        { "required", "required" },
                                        { "aria-required", "true" }
                                    }
                                )
                            </div>

                            <!-- Submit Button -->
                            <div>
                                <button type="submit" class="govuk-button" data-module="govuk-button">Submit</button>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
}
